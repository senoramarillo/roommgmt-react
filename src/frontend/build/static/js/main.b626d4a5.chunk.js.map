{"version":3,"sources":["client.js","App.js","reportWebVitals.js","index.js"],"names":["checkStatus","response","ok","error","Error","statusText","Promise","reject","Header","Layout","Content","Sider","SubMenu","Menu","columns","title","dataIndex","key","antIcon","LoadingOutlined","style","fontSize","spin","App","useState","buildings","setBuildings","collapsed","setCollapsed","fetching","setFetching","fetchBuildings","fetch","then","res","json","data","console","log","useEffect","minHeight","collapsible","onCollapse","overflow","height","position","top","left","className","theme","defaultSelectedKeys","mode","Item","icon","PieChartOutlined","DesktopOutlined","UserOutlined","TeamOutlined","FileOutlined","padding","margin","indicator","length","dataSource","bordered","pagination","pageSize","scroll","y","rowKey","building","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b626d4a5.chunk.js","sourcesContent":["import fetch from 'unfetch';\n\nconst checkStatus = response => {\n    if (response.ok) {\n        return response;\n    }\n    // convert non-2xx HTTP responses into errors:\n    const error = new Error(response.statusText);\n    error.response = response;\n    return Promise.reject(error);\n}\n\nexport const getAllBuildings = () =>\n    fetch(\"/buildings\")\n        .then(checkStatus);","import {useState, useEffect} from 'react';\nimport {getAllBuildings} from \"./client\";\nimport {\n    Layout,\n    Menu,\n    Breadcrumb,\n    Table, Spin, Empty\n} from 'antd';\nimport {\n    DesktopOutlined,\n    PieChartOutlined,\n    FileOutlined,\n    TeamOutlined,\n    UserOutlined,\n    LoadingOutlined\n} from '@ant-design/icons';\n\nimport './App.css';\n\nconst {Header, Content, Sider} = Layout;\nconst {SubMenu} = Menu;\n\nconst columns = [\n    {\n        title: 'Id',\n        dataIndex: 'id',\n        key: 'id',\n    },\n    {\n        title: 'Building Number',\n        dataIndex: 'buildingNumber',\n        key: 'buildingNumber',\n    },\n    {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n    },\n    {\n        title: 'Public Access',\n        dataIndex: 'publicAccess',\n        key: 'publicAccess',\n    },\n];\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nfunction App() {\n    const [buildings, setBuildings] = useState([]);\n    const [collapsed, setCollapsed] = useState(false);\n    const [fetching, setFetching] = useState(true);\n\n    const fetchBuildings = () =>\n        getAllBuildings()\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                setBuildings(data);\n                setFetching(false);\n            });\n\n    useEffect(() => {\n        console.log(\"component is mounted\");\n        fetchBuildings();\n    }, []);\n\n    const renderBuildings = () => {\n\n        if (fetching) {\n            return <Spin indicator={antIcon} />\n        }\n\n        if (buildings.length <= 0) {\n            return <Empty />;\n        }\n\n        return <Table\n            dataSource={buildings}\n            columns={columns}\n            bordered\n            title={() => 'Buildings'}\n            pagination={{ pageSize: 50 }}\n            scroll={{ y: 240 }}\n            rowKey={(building) => building.id}\n        />\n    }\n\n    return <Layout style={{minHeight: '100vh'}}>\n        <Sider collapsible\n               collapsed={collapsed}\n               onCollapse={() => setCollapsed(!collapsed)}\n               style={{\n                   overflow: \"auto\",\n                   height: \"100vh\",\n                   position: \"sticky\",\n                   top: 0,\n                   left: 0\n               }}>\n            <div className=\"logo\"/>\n            <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n                <Menu.Item key=\"1\" icon={<PieChartOutlined/>}>\n                    Rooms\n                </Menu.Item>\n                <Menu.Item key=\"2\" icon={<DesktopOutlined/>}>\n                    Meetings\n                </Menu.Item>\n                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"User\">\n                    <Menu.Item key=\"3\">Admin</Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"sub2\" icon={<TeamOutlined/>} title=\"Team\">\n                    <Menu.Item key=\"6\">Team</Menu.Item>\n                </SubMenu>\n                <Menu.Item key=\"9\" icon={<FileOutlined/>}>\n                    Files\n                </Menu.Item>\n            </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n            <Header className=\"site-layout-background\" style={{padding: 0}}/>\n            <Content style={{margin: '0 16px'}}>\n                <Breadcrumb style={{margin: '16px 0'}}>\n                    <Breadcrumb.Item>Buildings</Breadcrumb.Item>\n                    <Breadcrumb.Item>List</Breadcrumb.Item>\n                </Breadcrumb>\n                <div className=\"site-layout-background\" style={{padding: 24, minHeight: 360}}>\n                    {renderBuildings()}\n                </div>\n            </Content>\n        </Layout>\n    </Layout>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}